/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.felipeassoline.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MsgWrapper extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5983622367431855895L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MsgWrapper\",\"namespace\":\"com.felipeassoline.schemas\",\"fields\":[{\"name\":\"to\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"from\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"text\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"test1\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MsgWrapper> ENCODER =
      new BinaryMessageEncoder<MsgWrapper>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MsgWrapper> DECODER =
      new BinaryMessageDecoder<MsgWrapper>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MsgWrapper> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MsgWrapper> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MsgWrapper>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MsgWrapper to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MsgWrapper from a ByteBuffer. */
  public static MsgWrapper fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String to;
  @Deprecated public java.lang.String from;
  @Deprecated public java.lang.String text;
  @Deprecated public java.lang.String test1;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MsgWrapper() {}

  /**
   * All-args constructor.
   * @param to The new value for to
   * @param from The new value for from
   * @param text The new value for text
   * @param test1 The new value for test1
   */
  public MsgWrapper(java.lang.String to, java.lang.String from, java.lang.String text, java.lang.String test1) {
    this.to = to;
    this.from = from;
    this.text = text;
    this.test1 = test1;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return to;
    case 1: return from;
    case 2: return text;
    case 3: return test1;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: to = (java.lang.String)value$; break;
    case 1: from = (java.lang.String)value$; break;
    case 2: text = (java.lang.String)value$; break;
    case 3: test1 = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'to' field.
   * @return The value of the 'to' field.
   */
  public java.lang.String getTo() {
    return to;
  }

  /**
   * Sets the value of the 'to' field.
   * @param value the value to set.
   */
  public void setTo(java.lang.String value) {
    this.to = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return The value of the 'from' field.
   */
  public java.lang.String getFrom() {
    return from;
  }

  /**
   * Sets the value of the 'from' field.
   * @param value the value to set.
   */
  public void setFrom(java.lang.String value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.String value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'test1' field.
   * @return The value of the 'test1' field.
   */
  public java.lang.String getTest1() {
    return test1;
  }

  /**
   * Sets the value of the 'test1' field.
   * @param value the value to set.
   */
  public void setTest1(java.lang.String value) {
    this.test1 = value;
  }

  /**
   * Creates a new MsgWrapper RecordBuilder.
   * @return A new MsgWrapper RecordBuilder
   */
  public static com.felipeassoline.schemas.MsgWrapper.Builder newBuilder() {
    return new com.felipeassoline.schemas.MsgWrapper.Builder();
  }

  /**
   * Creates a new MsgWrapper RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MsgWrapper RecordBuilder
   */
  public static com.felipeassoline.schemas.MsgWrapper.Builder newBuilder(com.felipeassoline.schemas.MsgWrapper.Builder other) {
    return new com.felipeassoline.schemas.MsgWrapper.Builder(other);
  }

  /**
   * Creates a new MsgWrapper RecordBuilder by copying an existing MsgWrapper instance.
   * @param other The existing instance to copy.
   * @return A new MsgWrapper RecordBuilder
   */
  public static com.felipeassoline.schemas.MsgWrapper.Builder newBuilder(com.felipeassoline.schemas.MsgWrapper other) {
    return new com.felipeassoline.schemas.MsgWrapper.Builder(other);
  }

  /**
   * RecordBuilder for MsgWrapper instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MsgWrapper>
    implements org.apache.avro.data.RecordBuilder<MsgWrapper> {

    private java.lang.String to;
    private java.lang.String from;
    private java.lang.String text;
    private java.lang.String test1;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.felipeassoline.schemas.MsgWrapper.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.to)) {
        this.to = data().deepCopy(fields()[0].schema(), other.to);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.from)) {
        this.from = data().deepCopy(fields()[1].schema(), other.from);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.text)) {
        this.text = data().deepCopy(fields()[2].schema(), other.text);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.test1)) {
        this.test1 = data().deepCopy(fields()[3].schema(), other.test1);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MsgWrapper instance
     * @param other The existing instance to copy.
     */
    private Builder(com.felipeassoline.schemas.MsgWrapper other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.to)) {
        this.to = data().deepCopy(fields()[0].schema(), other.to);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.from)) {
        this.from = data().deepCopy(fields()[1].schema(), other.from);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.text)) {
        this.text = data().deepCopy(fields()[2].schema(), other.text);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.test1)) {
        this.test1 = data().deepCopy(fields()[3].schema(), other.test1);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'to' field.
      * @return The value.
      */
    public java.lang.String getTo() {
      return to;
    }

    /**
      * Sets the value of the 'to' field.
      * @param value The value of 'to'.
      * @return This builder.
      */
    public com.felipeassoline.schemas.MsgWrapper.Builder setTo(java.lang.String value) {
      validate(fields()[0], value);
      this.to = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'to' field has been set.
      * @return True if the 'to' field has been set, false otherwise.
      */
    public boolean hasTo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'to' field.
      * @return This builder.
      */
    public com.felipeassoline.schemas.MsgWrapper.Builder clearTo() {
      to = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * @return The value.
      */
    public java.lang.String getFrom() {
      return from;
    }

    /**
      * Sets the value of the 'from' field.
      * @param value The value of 'from'.
      * @return This builder.
      */
    public com.felipeassoline.schemas.MsgWrapper.Builder setFrom(java.lang.String value) {
      validate(fields()[1], value);
      this.from = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'from' field.
      * @return This builder.
      */
    public com.felipeassoline.schemas.MsgWrapper.Builder clearFrom() {
      from = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.String getText() {
      return text;
    }

    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public com.felipeassoline.schemas.MsgWrapper.Builder setText(java.lang.String value) {
      validate(fields()[2], value);
      this.text = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public com.felipeassoline.schemas.MsgWrapper.Builder clearText() {
      text = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'test1' field.
      * @return The value.
      */
    public java.lang.String getTest1() {
      return test1;
    }

    /**
      * Sets the value of the 'test1' field.
      * @param value The value of 'test1'.
      * @return This builder.
      */
    public com.felipeassoline.schemas.MsgWrapper.Builder setTest1(java.lang.String value) {
      validate(fields()[3], value);
      this.test1 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'test1' field has been set.
      * @return True if the 'test1' field has been set, false otherwise.
      */
    public boolean hasTest1() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'test1' field.
      * @return This builder.
      */
    public com.felipeassoline.schemas.MsgWrapper.Builder clearTest1() {
      test1 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MsgWrapper build() {
      try {
        MsgWrapper record = new MsgWrapper();
        record.to = fieldSetFlags()[0] ? this.to : (java.lang.String) defaultValue(fields()[0]);
        record.from = fieldSetFlags()[1] ? this.from : (java.lang.String) defaultValue(fields()[1]);
        record.text = fieldSetFlags()[2] ? this.text : (java.lang.String) defaultValue(fields()[2]);
        record.test1 = fieldSetFlags()[3] ? this.test1 : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MsgWrapper>
    WRITER$ = (org.apache.avro.io.DatumWriter<MsgWrapper>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MsgWrapper>
    READER$ = (org.apache.avro.io.DatumReader<MsgWrapper>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
